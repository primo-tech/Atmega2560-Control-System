//--------------------------------------------------------------------------------------------------------------------
/*
 *                                            CLASS HEADER FILES
 */
//--------------------------------------------------------------------------------------------------------------------
#include "init.h"
#include "motors.h"
#include "sensorRead.h"
#include <StateSpaceControl.h>
//#include "modelcontrollerParameters.h"
//---------------------------------------------------------------------------------------------------------------
/*
 *                                    VARIABLE/CONSTANT DEFINITIONS
 */
//---------------------------------------------------------------------------------------------------------------

bool breakout = 0;
/*
 * RECEIVER VARIABLES
 */
unsigned long int aa,bb,cc;
int x[15],ch1[15],ch[7],ii; //specifing arrays and variables to store values
/*
 *  CONTROL VARIABLES
 */

//--------------------------------------------------------------------------------------------------------------------
/*
 *                                         Model/Controller
 */
//--------------------------------------------------------------------------------------------------------------------
Model<14,6,4> HexaModel;
StateSpaceController<14,6,4,true,true> controller(HexaModel);
Matrix<4> y;
//--------------------------------------------------------------------------------------------------------------------
/*
 *                                         CLASS OBJECT INSTANTIATIONS
 */
//--------------------------------------------------------------------------------------------------------------------
Motors motor;                   // Instantiate motor control class
Initialise inital;              // Instantiate initialisation class
Sensor readIn;                  // Instantiate Sensor class
//--------------------------------------------------------------------------------------------------------------
/*
 *                                   COMPONENT INITIALISATION LOOP 
 */
//--------------------------------------------------------------------------------------------------------------
void setup() 
{
  Serial.begin(9600);
  Wire.begin();                // join i2c bus with address #1
  
  //Serial.println("Initialize BME280");
  //Serial.println("Initialize MPU6050");
  
HexaModel.A << 1, 0.01, 0, 0,       0, 0,    0, 0,      5.75621053669335e-08,      5.75621053669335e-08,      5.75621053669335e-08,      5.75621053669335e-08,      5.75621053669335e-08,      5.75621053669335e-08,
               0, 1,    0, 0,       0, 0,    0, 0,      1.07245832815221e-05,      1.07245832815221e-05,      1.07245832815221e-05,      1.07245832815221e-05,      1.07245832815221e-05,      1.07245832815221e-05,
               0, 0,    1, 0.01,    0, 0,    0, 0,      0.000115174069638472,      0.000115174069638472,     -0.000115174069638472,     -0.000115174069638472,      0,                         0,
               0, 0,    0, 1,       0, 0,    0, 0,      0.021458455937909,         0.021458455937909,        -0.021458455937909,        -0.021458455937909,         0,                         0,
               0, 0,    0, 0,       1, 0.01, 0, 0,      -4.0162276985368e-06,      -4.0162276985368e-06,      -4.0162276985368e-06,      -4.0162276985368e-06,      8.03245539707359e-06,      8.03245539707359e-06,
               0, 0,    0, 0,       0, 1,    0, 0,      -0.000748276459937416,     -0.000748276459937416,     -0.000748276459937416,     -0.000748276459937416,      0.00149655291987483,      0.00149655291987483,
               0, 0,    0, 0,       0, 0,    1, 0.01,   -9.60983389689434e-08,     9.60983389689434e-08,      9.60983389689434e-08,     -9.60983389689434e-08,      -9.60983389689434e-08,     9.60983389689434e-08,
               0, 0,    0, 0,       0, 0,    0, 1,      -1.79043944435084e-05,     1.79043944435084e-05,      1.79043944435084e-05,     -1.79043944435084e-05,      -1.79043944435084e-05,     1.79043944435084e-05,
               0, 0,    0, 0,       0, 0,    0, 0,      0.642621098382576,         0,                         0,                         0,                         0,                         0,
               0, 0,    0, 0,       0, 0,    0, 0,      0,                         0.642621098382576,         0,                         0,                         0,                         0,
               0, 0,    0, 0,       0, 0,    0, 0,      0,                         0,                         0.642621098382576,         0,                         0,                         0,
               0, 0,    0, 0,       0, 0,    0, 0,      0,                         0,                         0,                         0.642621098382576,         0,                         0,
               0, 0,    0, 0,       0, 0,    0, 0,      0,                         0,                         0,                         0,                         0.642621098382576,         0,
               0, 0,    0, 0,       0, 0,    0, 0,      0,                         0,                         0,                         0,                         0,                         0.642621098382576;

HexaModel.B << 1.02444754703327e-07, 1.02444754703327e-07, 1.02444754703327e-07,      1.02444754703327e-07,  1.02444754703327e-07, 1.02444754703327e-07,
                 2.96732653166542e-05, 2.96732653166542e-05, 2.96732653166542e-05,      2.96732653166542e-05,  2.96732653166542e-05, 2.96732653166542e-05,
                 0.000204978244577467, 0.000204978244577467,  -0.000204978244577467,   -0.000204978244577467,    0,                                     0,
                 0.0593722328986325,   0.0593722328986325,    -0.0593722328986325,     -0.0593722328986325,      0,                                     0,
                -7.14778340344831e-06, -7.14778340344831e-06, -7.14778340344831e-06,   -7.14778340344831e-06,  1.42955668068966e-05, 1.42955668068966e-05,
                -0.00207036537859572,  -0.00207036537859572,  -0.00207036537859572,    -0.00207036537859572,   0.00414073075719144,  0.00414073075719144,
                -1.71028677639819e-07,  1.71028677639819e-07,  1.71028677639819e-07,   -1.71028677639819e-07, -1.7102867763982e-07,  1.7102867763982e-07,
                -4.95386937384903e-05,  4.95386937384903e-05,  4.95386937384903e-05,   -4.95386937384903e-05, -4.95386937384903e-05, 4.95386937384903e-05,
                      4.16618778344148,                    0,                     0,                       0,     0,                                    0,
                                     0,     4.16618778344148,                     0,                       0,     0,                                    0,
                                     0,                    0,      4.16618778344148,                       0,     0,                                    0,
                                     0,                    0,                     0,        4.16618778344148,     0,                                    0,
                                     0,                    0,                     0,                       0,     4.16618778344148,                     0,
                                     0,                    0,                     0,                       0,     0,                     4.16618778344148;
                                     
HexaModel.C << 1,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,1,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,1,0,0,0,0,0,0,0,0,0,     // Sensor Matrix
               0,0,0,0,0,0,1,0,0,0,0,0,0,0;

 HexaModel.D << 0,0,0,0,0,0,
                0,0,0,0,0,0,       // FeedForward Matrix
                0,0,0,0,0,0,
                0,0,0,0,0,0;
                 
controller.K << 761.393959833812,   241.466654444683,     1.68131682851114,       0.311164417508888,     -2.52621511254615,  -1.17662489606051, -14.056378945297,  -25.3479441473318, 0.221130339584156,    0.00305066498172558,  -0.00115305120254759, -0.000867792849501417, 0.000403505924552382, 0.00011824757150668,
                761.393959833826,   241.466654444686,     1.6813168285117,        0.311164417508963,     -2.52621511256725,  -1.17662489606693, 14.0563789455906,  25.3479441476842,  0.00305066498172583,  0.22113033958416,     -0.000867792849499037,-0.00115305120254799,  0.000118247571501831, 0.000403505924551181,
                761.393959838006,   241.466654445703,     -1.68131682851008,      -0.311164417509156,     -2.52621511255757, -1.17662489606063, 14.0563789455197,  25.3479441475966,  -0.00115305120254757, -0.000867792849498356,0.221130339584163,    0.00305066498172904,   0.00011824757150856,  0.000403505924556791,
                761.393959837997,   241.466654445701,     -1.68131682851059,      -0.311164417509225,     -2.52621511253668, -1.17662489605427, -14.0563789453691, -25.3479441474212, -0.000867792849502135,-0.00115305120254776, 0.00305066498172945,  0.221130339584161,     0.000403505924558984, 0.000118247571512211,
                761.393959836094,   241.466654445243,     -2.23136417548658e-12,  -5.18495144310654e-13,  5.05243022511791,  2.35324979212515,  -14.0563789456632, -25.3479441477715, 0.000403505924552272, 0.000118247571501574, 0.000118247571508611, 0.000403505924558847,  0.219859040810108,    0.00177936620767327,
                761.393959836113,   241.466654445247,     -1.61572148811207e-12,  -4.36452066485417e-13,  5.0524302250968,   2.35324979211871,  14.0563789452242,  25.3479441472445,  0.000118247571506839, 0.000403505924551199, 0.000403505924557076, 0.000118247571512387,  0.00177936620767251,  0.219859040810103;    // Controller Gains

controller.L << 1.00895212043496,     9.18305987033383e-17, -2.85429221576388e-17, 2.93146154205345e-16,
                0.994019524480689,    -3.87537296682573e-15,-2.61499330410672e-15, -1.77230903104821e-15,
                -5.2580468229304e-16, 1.00902222220328,     2.91477725395037e-16,  9.51627429144667e-17,
                -4.04188683911224e-16, 1.00104394259673,     -2.59771700279423e-15, 5.30585670579739e-16,
                -1.48098728554743e-16, -1.22663050240527e-16,1.00895237707332,      1.14863390489247e-15,
                -1.34035568661388e-15, -3.29173167681132e-15,0.994045240184553,     7.93787601800888e-15,
                4.28864022375231e-17, 7.81868449832009e-17, 3.45266397360926e-18,  1.00895212048207,
                6.67578046590717e-16, 1.35567505041906e-15, -2.09949067983569e-16, 0.994019529201397,
                1.71102229437123e-07, 0.000342285989667509, -1.19381495892954e-05, -2.85650428751567e-07,
                1.71102229704912e-07, 0.000342285989666632, -1.19381495899866e-05, 2.85650427871543e-07,
                1.71102229776687e-07, -0.000342285989667046,-1.19381495898037e-05, 2.85650428873149e-07,
                1.71102229882376e-07, -0.000342285989666888,-1.19381495902557e-05, -2.85650428615826e-07,
                1.71102228723472e-07, 9.59795114777204e-17, 2.38762991782396e-05,  -2.85650428721523e-07,
                1.71102228784069e-07, 5.26983702005011e-16, 2.38762991802666e-05,  2.85650428629523e-07;

controller.I << 1200.40383946098, 4.54226906156445,   -2.7118872410124,    -3.89739218152291,
                1200.40383946102, 4.54226906156646,   -2.71188724104318,   3.89739218162291,
                1200.40383946805, -4.54226906154999,  -2.71188724105433,   3.89739218159909,
                1200.40383946804, -4.5422690615518,   -2.71188724102385,   -3.89739218154703,
                1200.40383946486, -2.07795482558985e-12, 5.42377448208949, -3.89739218164736,
                1200.40383946491, 6.89585615463793e-14,  5.42377448205877, 3.8973921814983;          // Integral Gains
                
  controller.initialise();     // intitalise state espace controller
  
  pinMode(2, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(2), read_me, FALLING); // enabling interrupt at pin 2
}
//------------------------------------------------------------------------------------------------------------------
/*
 *                                           MAIN CONTROL LOOP
 */
//------------------------------------------------------------------------------------------------------------------
void loop()
{
  motor.FullStop();  // otherwise set all motor values to 0
  breakout = 0;
  read_rc();             // read receiver values 
  //digitalWrite(4,1);   
  
  if(ch[1]< 1100 && ch[2] > 1800 && ch[3] < 1300 && ch[4] < 1100)
  {
    //digitalWrite(4,0);
    inital.InitSensors();          // intialise IMU and Barometer
    inital.InitMotors();           // intialise motors and calibrate IMU

    while(breakout != 1)
    {
      motor.StartUp();
      read_rc();
      
      if(ch[1] > 1200)
      {
        MainLoop();            // run main flight controll loop        
      }
    }
  }
}
//-------------------------------------------------------------------------------------------------------------
/*
 *                                                 FUNCTIONS
 */
//-------------------------------------------------------------------------------------------------------------
/*
 *   MAIN FLIGHT FUNCTIONALITY                             
 */                                   
void MainLoop()
{
  /*
 * TIMERS
 */
  unsigned long timer = 0;
  unsigned long timeBetFrames = 0;
  unsigned long shutdowntime;
  float timeStep = 0.01;

  /*
   * Reference INPUTS
   */
  double alt;
  double *xA;
  double *yA;
  double *zA;

  double Ainput,Rinput,Pinput;
  double initialAlt;

  double ThrottleSetPoint = 0;
  double AltitudeSetPoint = 0;
  double PitchSetPoint = 0;
  double RollSetPoint = 0;
  double YawSetPoint = 0;;
  
  initialAlt = 0;
  for(int counter = 0; counter < 10; counter++)
  {
    initialAlt += readIn.Altitude();
  }
  initialAlt = initialAlt/10;
  
  while(breakout != 1)
  {
    timer = millis();
  
    read_rc();                      // begin decoding PPM values
    
    xA = readIn.AxisXYZ();
    yA = readIn.AxisXYZ()+1;       // read in roll, pitch and yaw IMU values
    zA = readIn.AxisXYZ()+2;          
    
	  y(0) = readIn.Altitude();       // read in current altitude value
    y(1) = *xA -1.5;                          // Read in Systems Outputs
    y(2) = *yA;
    y(3) = *zA;
    
    ThrottleSetPoint =  map(ch[1],1040,2020,1000,1800);            // read in throttle setpoint
    
    if(ThrottleSetPoint > 1050)
    {
        Ainput = y(0);
        AltitudeSetPoint = motor.AltitudeControl(ThrottleSetPoint,Ainput,initialAlt); // calcute the altitude setpoint from throttle commands
        PitchSetPoint = map(ch[4],1000,1900,10,-10);
        RollSetPoint = map(ch[3],1000,1900,10,-10);   // read in roll pitch and yaw setpoint values from receiver
                                                      // and map to between 0 and 10 degrees 
        YawSetPoint = map(ch[2],1070,1930,-200,200);       // non feedback rate control for yaw
        
        controller.r << AltitudeSetPoint,PitchSetPoint,RollSetPoint,YawSetPoint;   // set controller references
        
        shutdowntime = 0;                             // keep a running count of time within loop
    }
    else
    {
        AltitudeSetPoint = 0;
        PitchSetPoint = 0;
        RollSetPoint = 0;
        YawSetPoint = 0;
        
        controller.r << AltitudeSetPoint,PitchSetPoint,RollSetPoint,YawSetPoint;  // set controller references
        
        shutdowntime += (millis()- timer)*10;           
        
        if( shutdowntime > 4000)                  // if running count exceeds 4000 counts break out of main loop
        {                                         // and reset all setpoints to zero
          //digitalWrite(12,0);
          //digitalWrite(13,0);
          breakout = 1;
        }
    }

    controller.update(y,timeStep);                        // Update Outputs values
 
    motor.FlightControl(controller.u(0),controller.u(1),controller.u(2),
                        controller.u(3),controller.u(4),controller.u(5));         // send controller output tomotors
    
    timeBetFrames = millis() - timer;
    delay((timeStep*1000) - timeBetFrames);   // run Loop at 100Hz
  }
}                    
/*
 *   READ PPM VALUES FROM PIN 2
 */
  // this code reads value from RC reciever from PPM pin (Pin 2 or 3)
  // this code gives channel values from 0-1000 values 
  //    -: ABHILASH :-    //
void read_me() 
{
  int j;
  
  aa=micros();   // store time value a when pin value falling
  cc=aa-bb;      // calculating time inbetween two peaks
  bb=aa;         
  x[ii]=cc;      // storing 15 value in array
  ii=ii+1;       

  if(ii==15)
  {
    for(j=0;j<15;j++) 
    {
      ch1[j]=x[j];
    }
    ii=0;
  }
}  // copy store all values from temporary array another array after 15 reading 

void read_rc()
{
  int j;
  
  for(int k=14;k>-1;k--)
  {
    if(ch1[k]>10000)
    {
      j=k;
    }
  }  // detecting separation space 10000us in that another array
                    
  for(int i=1;i<=6;i++)
  {
    ch[i]=(ch1[i+j]);
  }
}     // assign 6 channel values after separation space
